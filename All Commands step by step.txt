docker images
docker image ls
docker ps
docker ps -a
docker container ls
To run only a command from container: docker container run ubuntu cat /etc/os-release
docker container run ubuntu sleep 30
docker container rm 934uniquenumber
docker  rm 934uniquenumber 4424dk dfdf343   (more then one container can be deleted)


docker start nameofcontainer
docker stop nameofcontainer

To run container in backgroud
-d (use it for detached)

docker run -d ubuntu

Connecting with the container machine (linux/unix)

docker run  -it ubuntu /bin/bash  
-it: Means Interactive and terminal (tty)
inside ubuntu Os
apt-get apache

Ctrl+P and Ctrl+Q (get out of the container and it will not stop)

delete all conainer

docker ls -aq

for Windows docker container prune

docker rm $(docker ls -aq)

Nginix container: nginx

docker run -d nginix

finding ip address: docker inpect nginix

docker inspect 24222fdl_Id

You will be able to see IPAddress ; 172.17.0.3
Expose: Port 80

See the process runing in docker container

docker container top containerId

Port mapping

docker container run -d -p 3600:80 --name new_image_pcapache original_image_name
docker run -it -p 81:80   --name pushpjeet pushpjeet/ubuntu_apache_pc /bin/bash

Accesssing the shell

docker exec -it con_id

Changing the container name

docker rename conid newname

docker  restart conid

Attaching, puting in background, kill, wait,pause, unpause

Detached mode: docker run -d nginix
Attching again:  docker attach conid


docker container run -itd ubuntu /bin/bash

docker run attach conid

#hostname
exit

docker kill conid

docker wait conid

docker pause conid

docker unpause conid

docker port name

docker port conid

Create docker container, diff/copy file 

docker create ubuntu sleep 60

docker container diff conid
 
docker container cp test /  conid:/tmp/
docker container attach conid

Copy:
docker cp "D:\Education\Dockers\New folder\test.txt" cabd30ce55a8:/tmp

Tarfile example
apt-get update
apt-get install tree git -y
command install tree and git too
check tree

Export Import of tar file
docker container export conid > exported_image_name.tar

docker image import exported_image_name.tar  my_ubuntu_tree_git

From container to image
docker container commit --author "Pushpjeet Cholkar" -m "This is test commit" conid_77d32cce71ef  my_new_image_name
Now drop the container:
Create the container from the image we just created.
docker cantainer  rm -f conid
docker run -it my_new_image_name /bin/bash

Push Image/Tag/pull/login

docker pull ubuntu:14.04

Tagging image
docker image tag imagename hub.docker.com/pushpjeet/imagename_with_tag
docker image tag ubuntu_apache hub.docker.com/pushpjeet/ubuntu_apache_pc
docker image tag ubuntu_apache pushpjeet/ubuntu_apache_pc

Pushing to the hub:
docker login
docker push pushpjeet/imagename_with_tag
docker push pushpjeet/ubuntu_apache_pc

Image/history/inspect image/prune/rm
docker image ls
changing format: docker image ls  --format '{{.ID}}, {{'.Repository}}'
docker image history ubuntu
docker rmi ubuntu:10.04

To delete all images
docker image prune

Docker image save/load
docker image save imageid > my_image.tar
docker image load -i my_image.tar

docker container export
Dockerfile
------------

vi Dockerfile


FROM  ubuntu:16.04

creating image: docker build -t myubuntu:1

docker images ls

docker container run -it myubuntu:1

Check tree command
it will not be present
install it: apt-get update && apt-get install tree

creating image with tree command

vi Dockerfile

FROM  ubuntu:16.04
RUN apt-get update && apt-get install -y tree


docker image build -t myubuntu2:1 .

Now creating container from it, the tree command will be installed.

docker container run -it myubuntu2:1

RUN touch /tmp/1.txt
RUN touch /tmp/2.txt
RUN touch /tmp/3.txt
RUN touch /tmp/4.txt
RUN touch /tmp/5.txt

label
-----
Create a docker file

FROM ubuntu:14.04
LABEL name='Pushpjeet Cholkar'
LABEL email='pushpjeet@gmail.com'

Build an image.
docker image build -t myubuntu:10 .

docker image ls
docker image inspect myubuntu:10

Environment variable
------------------------

Create a docker file
--------------------

FROM ubuntu:14.04
LABEL name='Pushpjeet Cholkar'
LABEL email='pushpjeet@gmail.com'
ENV NAME pushpjeet
ENV PASS password

Build an image.
docker image build -t myubuntu:11 .
docker container run -it myubuntu:11


Create a docker file
--------------------

FROM ubuntu:14.04
LABEL name='Pushpjeet Cholkar'
LABEL email='pushpjeet@gmail.com'
ENV NAME pushpjeet
ENV PASS password
RUN pwd>/tmp/1stpwd.txt
RUN cd /tmp/
RUN pwd>/tmp/2ndpwd.txt
WORKDIR /tmp
RUN pwd>/tmp/3rdpwd.txt

docker image build -t myubuntu:12 .
docker container run -it myubuntu:12



Create a docker file
--------------------

FROM ubuntu:14.04
LABEL name='Pushpjeet Cholkar'
LABEL email='pushpjeet@gmail.com'
ENV NAME=pushpjeet
ENV PASS=password
RUN pwd > /tmp/1stpwd.txt
RUN cd /tmp/ && pwd > /tmp/2ndpwd.txt
WORKDIR /tmp
RUN pwd > /tmp/3rdpwd.txt
RUN apt-get update && apt-get install -y openssh-server && apt-get install -y python
RUN useradd -rm -d /home/pushpjeet -s /bin/bash -g root -G sudo -u 1001 -m -p $(echo "$PASS" | openssl passwd -1 -stdin) $NAME

RUN whoami > /tmp/1stwhoami.txt
USER $NAME
RUN whoami > /tmp/2ndwhoami.txt


docker image build -t myubuntu:13 .
docker container run -it myubuntu:13

cat 1stwhoami.txt
cat 2ndwhoami.txt

Create directory in tmp and then copy data in the docker image.
-----------------------------------------------------------------

Create a docker file
--------------------

FROM ubuntu:14.04
LABEL name='Pushpjeet Cholkar'
LABEL email='pushpjeet@gmail.com'
ENV NAME=pushpjeet
ENV PASS=password
RUN pwd > /tmp/1stpwd.txt
RUN cd /tmp/ && pwd > /tmp/2ndpwd.txt
WORKDIR /tmp
RUN pwd > /tmp/3rdpwd.txt
RUN apt-get update && apt-get install -y openssh-server && apt-get install -y python
RUN useradd -rm -d /home/pushpjeet -s /bin/bash -g root -G sudo -u 1001 -m -p $(echo "$PASS" | openssl passwd -1 -stdin) $NAME

RUN whoami > /tmp/1stwhoami.txt
USER $NAME
RUN whoami > /tmp/2ndwhoami.txt
RUN mkdir -p /tmp/project
#COPY testproject /tmp/project/
CMD ["python"]

Same thing you can do with ADD command.
Add command will extract or even do download when given URL



docker image build -t myubuntu:14 .
docker container run -it myubuntu:14
docker container kill conid

docker network create test
docker container run -it --network=test ubuntu:14.04 bash
hostname


docker container run -it --network=host ubuntu:14.04 bash

Nginx container
---------------
docker container run -itd --network=host   nginx
docker container 
docker inspect conid


PORT Mapping
------------
docker stop <container_id>
docker rm <container_id>
docker run -d -p <host_port>:<container_port> <image_name>


Container which will not attach to any network: Null Network
docker container run -it --network=none ubuntu:14.04 bash

Docker networking connect, disconnect

docker network create test
docker container run -it --network bridge ubuntu:14.04 bash

Attaching NIC to the container with different network

docker network connect test conid

docker network disconnect test conid

docker network rm/prune

Docker registry
Installing

docker run registry
docker container run -d -p 5000:5000 --name simple_registry registry

localhost:5000

pushing to local registry

docker image tag redis:alpine 127.0.0.1:5000/redis:alpine 
docker image ls
docker image push 127.0.0.1:5000/redis


Docker compose
==============
Database Tier-

docker container run --name some-mysql -e MYSQL_ROOT_PASSWORD=mypassword -d mysql:5.7
docker container inspect conid 
172.17.0.2
Wordpress:- Frontend Tier
docker container run --name some-wordpress -e WORDPRESS_DB_HOST=172.17.0.2:3306 -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=mypassword -d wordpress
docker container run --name some-wordpress -e WORDPRESS_DB_HOST=172.17.0.2:3306 -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=mypassword -p 8080:80 -d wordpress
Put this in browser
http://localhost:8080/wp-admin/install.php

If this gives error create database in mysql container:
docker exec -it conid /bin/bash
mysql -u root -p
Give the root password
create database wordpress;

docker container run -itd nginx
by docker compose:docker-compose.yml
version: '3'
services:
  webapp1:
    image: nginx
    ports:
      - "8080:80"
  webapp2:
    image: nginx
    ports:
      - "8081:80"

docker -compose up -d
docker-compose down

docker-compose --help

if the docker-compose.yml file have some other name then you can 
docker-compuse -f docker-coompose2.yml up -d

You can have this file in json too. 

{
    "version": "3",
    "services": {
        "webapp1": {
            "image": "nginx",
            "ports": [
                "8080:80"
            ]
        },
        "webapp2": {
            "image": "nginx",
            "ports": [
                "8081:80"
            ]
        }
    }
}

execute this file: docker-compose -f docker-compose.json up -d
why the json is working, because yaml is the subset of json. 

Commands:
  build              Build or rebuild services
  config             Validate and view the Compose file
  create             Create services
  down               Stop and remove resources
  events             Receive real time events from containers
  exec               Execute a command in a running container
  help               Get help on a command
  images             List images
  kill               Kill containers
  logs               View output from containers
  pause              Pause services
  port               Print the public port for a port binding
  ps                 List containers
  pull               Pull service images
  push               Push service images
  restart            Restart services
  rm                 Remove stopped containers
  run                Run a one-off command
  scale              Set number of containers for a service
  start              Start services
  stop               Stop services
  top                Display the running processes
  unpause            Unpause services
  up                 Create and start containers
  version            Show version information and quit

docker-compose images



